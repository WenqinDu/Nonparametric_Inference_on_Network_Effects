NET_four_effects_degen <-function(alpha = 1, adj_mat){
diag(adj_mat) <- NA
n <- dim(adj_mat)[1]
a_n <- 1/n/(n-1)
b_n <- (n-2)/n/(n-1)
c_n <- (n-2)*(n-3)/n/(n-1)
single_kernel_ord4 <- function(adj_mat_4t4){
h_stars.save <- rep(NA,6)
xi.matr <- adj_mat_4t4
diag(xi.matr) <- NA
elements <- as.vector(t(xi.matr))
xi.vec <- na.omit(elements)
# h1_star
h_stars.save[1] <- mean(xi.vec^2)
# h2_star
tmp_1 <- xi.matr
tmp_2 <- xi.matr
tmp_1[lower.tri(tmp_1)] <- NA
tmp_2[upper.tri(tmp_2)] <- NA
a_2_clt <- na.omit(as.vector(t(tmp_1)))
b_2_clt <- na.omit(as.vector(tmp_2))
h_stars.save[2] <- mean(a_2_clt * b_2_clt)
# h3_star
a_3 <- rep(xi.vec, each = 2)
B.temp <- matrix(xi.vec, 3, 4)
combine.temp_3 <- B.temp[-1,]
for(i in 2:3){
combine.temp_3 <- rbind(combine.temp_3, B.temp[-i,])
}
b_3 <- as.vector(combine.temp_3)
h_stars.save[3] <- mean(a_3 * b_3)
# h4_star
xi.vec.transp <- na.omit(as.vector(xi.matr))
a_4 <- rep(xi.vec.transp, each = 2)
D.temp <- matrix(xi.vec.transp, 3, 4)
combine.temp_4 <- D.temp[-1,]
for(i in 2:3){
combine.temp_4 <- rbind(combine.temp_4, D.temp[-i,])
}
b_4 <- as.vector(combine.temp_4)
h_stars.save[4] <- mean(a_4 * b_4)
# h5_star
h_stars.save[5] <- mean(c(a_3,b_4) * c(b_4,a_3))
# h6_star
e <- adj_mat_4t4
h_stars.save[6] <- ((e[1,2]*e[3,4]+e[1,2]*e[4,3]+e[2,1]*e[3,4]+e[2,1]*e[4,3]+
e[1,3]*e[2,4]+e[1,3]*e[4,2]+e[3,1]*e[2,4]+e[3,1]*e[4,2]+
e[1,4]*e[2,3]+e[1,4]*e[3,2]+e[4,1]*e[2,3]+e[4,1]*e[3,2])/12)
h_star <- a_n*(h_stars.save[1] + h_stars.save[2]) + c_n*h_stars.save[6] +
b_n*(h_stars.save[3] + h_stars.save[4] + 2*h_stars.save[5])
# combined to be estimator's kernel
single_kernel_ord4_ouput <- rep(NA,5)
single_kernel_ord4_ouput[5] <- h_stars.save[5]-h_star
single_kernel_ord4_ouput[4] <- h_stars.save[4]-h_star
single_kernel_ord4_ouput[3] <- h_stars.save[3]-h_star
single_kernel_ord4_ouput[2] <- h_stars.save[2]-h_star
return(single_kernel_ord4_ouput)
}
replctn <- floor(n^alpha)
incomplete_Us <- matrix(NA,replctn,5)
for (i in 1:replctn){
ijkl <- sort(sample(1:n, 4, replace = FALSE, prob = NULL))
adj_mat_dim4 <- adj_mat[ijkl,ijkl]
incomplete_Us[i,] <- single_kernel_ord4(adj_mat_dim4)
}
eta_est <- (apply(incomplete_Us,2,mean)/sqrt(apply(incomplete_Us,2,var))*n^(alpha/2))
eta_est_mean <- apply(incomplete_Us,2,mean)
eta_deno <- sqrt(apply(incomplete_Us,2,var))/n^(alpha/2)
result <- matrix(c(eta_est_mean[2], eta_deno[2], eta_est[2], 2*(1-pnorm(abs(eta_est[2]))),
eta_est_mean[3], eta_deno[3], eta_est[3], 2*(1-pnorm(abs(eta_est[3]))),
eta_est_mean[4], eta_deno[4], eta_est[4], 2*(1-pnorm(abs(eta_est[4]))),
eta_est_mean[5], eta_deno[5], eta_est[5], 2*(1-pnorm(abs(eta_est[5])))), ncol=4, byrow=TRUE)
colnames(result) <- c('estimate','std.error','statistic','pvalue')
rownames(result) <- c('reciprocity effect','same sender effect','same receiver effect','sender-receiver effect')
list(estimate = result[,1],
std.error = result[,2],
statistic = result[,3],
pvalue = result[,4],
sumry = as.table(result))
}
mat_example <- as.matrix(rnorm(10000,0,1),100,100)
set.seed(68)
fit1 <- NET_four_effects_degen(1,mat_example)
mat_example <- matrix(rnorm(10000,0,1),100,100)
set.seed(68)
fit1 <- NET_four_effects_degen(1,mat_example)
fit1$sumry
mat_example <- matrix(rnorm(10000,0,1),100,100) + matrix(rep(rnorm(100,0,1),100),100,100)
set.seed(68)
fit1 <- NET_four_effects_degen(1,mat_example)
fit1$sumry
matrix(rep(rnorm(100,0,1),100),100,100)
